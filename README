IoT-Enabled Smart Home Automation System
================================================================================

Overview
This project is an ESP32-based smart home automation system developed using ESP-IDF in C++ and simulated on Wokwi. It collects environmental data (temperature, humidity, luminosity) and controls devices (curtains, lights) based on schedules and conditions, sending telemetry to app.coreiot.io via MQTT using the ThingsBoard SDK. The system leverages FreeRTOS for multitasking, ensuring robust WiFi connectivity, time synchronization, and device control. Designed for real-world smart home applications, it demonstrates skills in embedded systems, IoT communication, RTOS, and protocol handling, targeting fresher-level Embedded Software Engineer roles.

Features
- Reads temperature and humidity from a DHT22 sensor (GPIO 47) every 5 seconds, buffered via FreeRTOS queue.
- Detects luminosity using an LDR (GPIO 10 AO, 21 DO) every 5 seconds, optimized with a state machine and queue.
- Synchronizes time with NTP every 15 seconds for scheduling.
- Controls curtains (stepper motor on GPIO 11 step, 21 direction) and lights (GPIO 20) based on time (7 AM - 5 PM) and luminosity (light on if below threshold 100).
- Connects to a WiFi network ("Wokwi-GUEST") with event-driven reconnection.
- Publishes sensor data as JSON to ThingsBoard server (port 1883) using MQTT.
- Uses FreeRTOS tasks for modular operation: WiFi, ThingsBoard, sensor reading, control, and NTP.
- Simulates functionality in Wokwi with debugging via Serial Monitor.
- Implemented in C++ to support ArduinoJson and ThingsBoard SDK.
- Initializes ILI9341 TFT LCD (SPI: GPIO 13 MOSI, 9 SCK, 15 CS) for future display of sensor data.

Hardware
- ESP32-S3-DevKitM-1: Core microcontroller (4 MB flash, 512 KB RAM).
- DHT22 Sensor: GPIO 47 for temperature and humidity.
- LDR: GPIO 10 (AO), 21 (DO) for luminosity, planned outdoors.
- Stepper Motor: GPIO 11 (step), 21 (direction) for curtains.
- Light: GPIO 20 for ambient control.
- ILI9341 TFT LCD: SPI (GPIO 13 MOSI, 9 SCK, 15 CS).

Software Architecture
- WiFi Task: Connects to "Wokwi-GUEST" and manages reconnection.
- ThingsBoard Task: Publishes telemetry to ThingsBoard server.
- DHT22 Task: Reads and queues temperature/humidity data.
- LDR Task: Reads and queues luminosity data.
- NTP Task: Fetches and queues time data.
- Control Task: Manages curtains and lights based on time and luminosity.

Real-World Applications
- Smart Home Automation: Controls curtains and lights based on time and light levels.
- Environmental Monitoring: Tracks temperature, humidity, and luminosity for climate control.
- Security: Future motion detection for intrusion alerts or automation triggers.
- Data Logging: Offline storage for environmental analysis or compliance.

Planned Features
- ILI9341 TFT LCD (SPI):
  - Create lcd_task to display LDR/DHT22 data every 5 seconds with custom text rendering.
- Temperature-Based Control (DHT22):
  - Close curtains and toggle a fan/AC (GPIO 13) if temperature > 32°C during 7 AM-7 PM.
- Manual Overrides:
  - Add button or ThingsBoard RPC for manual curtain/light control.
- ADXL345 Accelerometer (SPI):
  - Detect motion for smart home security (GPIO 9 SCK, 14 MISO, 15 CS).
  - Add accelerometer_task to read data every second and publish to app.coreiot.io.
  - Use ESP-IDF’s spi_master.h for SPI communication.
- SD Card (SPI):
  - Log DHT22 and accelerometer data to an SD card (same SPI bus, GPIO 7 CS).
  - Add sd_logging_task to write data every minute, using a semaphore for access.
  - Use ESP-IDF’s vfs.h and sdmmc.h for file operations.

Future Improvements
- Implement FreeRTOS queues to share data between all tasks (dht22_task, ldr_task, ntp_task, control_task, thingsboard_task, lcd_task, accelerometer_task, sd_logging_task).
- Add error handling for sensor failures (DHT22, LDR) and MQTT connection issues.
- Create a Wokwi demo video showing telemetry, control, and display features.
- Optimize task priorities (e.g., sensor tasks higher, logging lower).
