# IoT-Enabled Smart Home Automation System

## Overview
This project is an ESP32-S3-based smart home automation system developed using ESP-IDF in C++ and simulated on Wokwi. It collects environmental data (temperature, humidity, luminosity) and controls devices (curtains, lights) based on schedules and conditions, sending telemetry to app.coreiot.io via MQTT using the ThingsBoard SDK. The system leverages FreeRTOS for multitasking, ensuring robust WiFi connectivity, time synchronization, device control, and data display on an ILI9341 TFT LCD. Designed for real-world smart home applications, it demonstrates skills in embedded systems, IoT communication, RTOS, and protocol handling, targeting fresher-level Embedded Software Engineer roles.

## Features
- Reads temperature and humidity from a DHT22 sensor (GPIO 47) every 5 seconds.
- Detects luminosity using an LDR (GPIO 10 AO, 21 DO) every 5 seconds, optimized with a state machine.
- Synchronizes time with NTP every 15 seconds for scheduling (NTP timer: 15000ms).
- Controls curtains (stepper motor on GPIO 11 step, 21 direction) and lights (GPIO 20) based on time (7 AM-5 PM) and luminosity (light on if below threshold 100).
- Connects to a WiFi network ("Wokwi-GUEST") with event-driven reconnection (WiFi timer: 1000ms).
- Publishes sensor data as JSON to ThingsBoard server (port 1883) using MQTT (ThingsBoard timer: 1000ms loop, 100ms delay).
- Uses FreeRTOS tasks: WiFi, ThingsBoard, DHT22, LDR, NTP, control, and lcd_task.
- Displays data on ILI9341 TFT LCD (SPI: GPIO 13 MOSI, 9 SCK, 15 CS, 2 DC, 16 RESET) using lcdgfx library with ssd1306xled_font8x16.
- Implements a DataStorage class for global, read-only access to sensor and NTP data, with modular display formatting via display_item_t.

## Hardware
- ESP32-S3-DevKitM-1: Core microcontroller (4 MB flash, 512 KB RAM).
- DHT22 Sensor: GPIO 47 for temperature and humidity (read timer: 2000ms, delay: 5000ms).
- LDR: GPIO 10 (AO), 21 (DO) for luminosity (timer: 5000ms), planned outdoors.
- Stepper Motor: GPIO 11 (step), 21 (direction) for curtains (delay timer: 10ms, max steps: 500).
- Light: GPIO 20 for ambient control.
- ILI9341 TFT LCD: SPI (GPIO 13 MOSI, 9 SCK, 15 CS, 2 DC, 16 RESET, 17 LED, 14 MISO; SPI host: SPI1_HOST, clock: 10MHz).

## Software Architecture
- **WiFi Task**: Connects to "Wokwi-GUEST" and manages reconnection.
- **ThingsBoard Task**: Publishes telemetry to ThingsBoard server.
- **DHT22 Task**: Reads and queues temperature/humidity data.
- **LDR Task**: Reads and queues luminosity data.
- **NTP Task**: Fetches and queues time data.
- **Control Task**: Manages curtains and lights based on time and luminosity.
- **lcd_task**: Displays sensor data on ILI9341 using lcdgfx library (fetch timer: 5000ms, display timer: 1000ms, flush timer: 10ms).
- **DataStorage Class**: Manages global storage of latest LDR, DHT22, and NTP data using local_data_t union.
- **Display Formatting**: Uses display_item_t structure to format data (e.g., "Temp: %.2fC\n", "Date: %02d/%02d/%02d\n").

## Progress
- Set up ESP32-S3, DHT22, LDR, and ILI9341 in Wokwi. Implemented WiFi, ThingsBoard, DHT22, LDR, NTP, and Control tasks. Created DataStorage class to replace queue-based data sharing, resolving conflicts. Developed lcd_task prototype with lcdgfx for static text display.
- Completed lcd_task to display live LDR/DHT22/NTP data every 5 seconds. Refactored display logic using display_item_t for modular formatting. Tested display in Wokwi (system stable at 54% flash, 12.0% RAM with PSRAM).
- System operational with all core tasks (WiFi, ThingsBoard, sensors, control, display) integrated. Flash usage at 54% (950,000 bytes of 1.75 MB), RAM at 12.0% (38,000 bytes) with PSRAM.

## Planned Features
- Enhance lcd_task with conditional display (e.g., highlight temperature if >32Â°C) and energy usage monitoring (calculate light-on duration).
- Integrate ADXL345 accelerometer for motion detection, develop security alerts, and extend lcd_task for motion status display.
- Add SD card for logging and optimize memory usage (target <48% flash, <15% RAM).
- Implement temperature-based fan control, add button-based manual overrides, and enhance lcd_task with dynamic status messages.
- Integrate all features, create Wokwi demo video, and update documentation.

## Future Improvements
- Optimize task priorities using DataStorage for data sharing.
- Add error handling for sensor failures and MQTT issues.
- Update GitHub README with state diagram and changelog.

## Notes
- MQTT broker: app.coreiot.io.
- Using C++ for ArduinoJson/ThingsBoard SDK compatibility.
- Test in Wokwi with ESP LOGs.
- ILI9341 displays lighting status and sensor data (e.g., "Temp: 25.50C", "Date: 21/05/25").
- LDR planned for outdoor placement.
- DataStorage provides read-only access with JSON parsing for ThingsBoard.