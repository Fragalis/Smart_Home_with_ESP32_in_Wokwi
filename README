# IoT-Enabled Smart Home Automation System

## Overview
This project is an ESP32-S3-based smart home automation system developed using ESP-IDF in C++ and simulated on Wokwi. It collects environmental data (temperature, humidity, luminosity) and controls devices (lights, doors) based on schedules, conditions, and events, sending telemetry to app.coreiot.io via MQTT using the ThingsBoard SDK. The system leverages FreeRTOS for multitasking, ensuring robust WiFi connectivity, time synchronization, device control, and data management with a thread-safe `DataStorage` class. Designed for real-world smart home applications, it demonstrates skills in embedded systems, IoT communication, RTOS, and protocol handling, targeting fresher-level Embedded Software Engineer roles.

## Features
- Reads temperature and humidity from a DHT22 sensor every 5 seconds.
- Detects luminosity using an LDR every 5 seconds.
- Synchronizes time with NTP every 15 seconds for scheduling.
- Controls lights (GPIO 20) based on darkness (LDR) and sleep time (NTP, 7 AM - 11 PM).
- Controls doors with a stepper motor (GPIO 11 step, 21 direction) triggered by an HC-SR04 ultrasound sensor detecting persons (<50 cm).
- Connects to a WiFi network ("Wokwi-GUEST") with event-driven reconnection.
- Publishes sensor data as JSON to ThingsBoard server (port 1883) using MQTT.
- Uses FreeRTOS tasks: WiFi, ThingsBoard, DHT22, LDR, NTP, control, hc_sr04, lcd_task and planned pir task.
- Implements a thread-safe `DataStorage` class for global access to sensor and NTP data, using a semaphore for concurrency.

## Hardware
- ESP32-S3-DevKitM-1: Core microcontroller (4 MB flash, 512 KB RAM).
- DHT22 Sensor: GPIO 47 for temperature and humidity (timer: 2500ms).
- LDR: GPIO 10 (AO) for luminosity (timer: 5000ms), planned outdoors.
- Stepper Motor: GPIO 11 (step), 21 (direction) for door control (delay timer: 10ms, max steps: 50).
- Light: GPIO 20 for ambient control.
- HC-SR04 Ultrasound Sensor: GPIO 41 (TRIG), 42 ECHO for person detection and obstacle sensing (timer: 500ms on motion, 5000ms otherwise).

## Software Architecture
- **WiFi Task**: Connects to "Wokwi-GUEST" and manages reconnection.
- **ThingsBoard Task**: Publishes telemetry to ThingsBoard server.
- **DHT22 Task**: Reads and queues temperature/humidity data.
- **LDR Task**: Reads and queues luminosity data.
- **NTP Task**: Fetches and queues time data.
- **Control Task**: Manages lights and doors using a Polling Architecture with `check_state_task` (polling conditions.
- **hc_sr04_task**: Measures distance and posts events to the queue, with PIR-triggered responsiveness.
- **DataStorage Class**: Manages global storage of latest LDR, DHT22, HC-SR04, and NTP data with internal semaphore.

## Planned Features
- Enhance control logic with PIR-based power saving (e.g., turn off lights after 5 minutes of no motion).
- Integrate ILI9341 TFT LCD (SPI: GPIO 13 MOSI, 9 SCK, 15 CS, 2 DC, 16 RESET) for data display, with conditional formatting (e.g., highlight temperature >32Â°C).
- Add SD card for logging sensor data and optimize memory usage (target <48% flash, <15% RAM).
- Implement temperature-based fan control (GPIO TBD) and button-based manual overrides (GPIO TBD).
- Expand security features with door/window sensors (Week 2) and state machine for door states (Week 4).
- Integrate vibration, air quality, smoke, water, and health sensors (Weeks 3-5) with event-driven rules.

## Future Improvements
- Optimize task priorities using `DataStorage` for efficient data sharing.
- Add robust error handling for sensor failures, MQTT issues, and stepper motor faults.
- Update GitHub README with state diagram, changelog, and detailed Hybrid Rule-Based Architecture description.
- Create a Wokwi demo video showcasing door control, light automation, and security alerts.